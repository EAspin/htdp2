(define (sum lst)
  (cond
    [(empty? lst) 0]
    [(pos? lst) (+ (first lst) (sum (rest lst)))]
    [else (error "list contains an invalid number")]))

(define (pos? lst)
  (cond
    [(empty? lst) #true]
    [else
     (and (positive? (first lst)) (pos? (rest lst)))]))

(define l (cons 25 (cons 25 (cons 25 (cons 25 '())))))
(define neg (cons 25 (cons -25 (cons 25 '()))))
(define one (cons 25 '()))
(define mt '())
(check-expect (sum mt) 0)
(check-expect (sum l) 100)
(check-expect (sum neg) (error "list contains an invalid number"))

(define (all-true lst)
  (cond
    [(empty? lst) #true]
    [else (and
      (first lst) (all-true (rest lst)))]))

(define trues (cons #true (cons #true (cons #true '()))))
(define mt '())
(define one (cons #false (cons #true (cons #false '()))))
(define falses (cons #f (cons #f (cons #f '()))))
(define two (cons #true (cons #false (cons #true (cons #false '())))))

(define (one-true lst)
  (cond
    [(empty? lst) #false]
    [else
     (or (first lst) (one-true (rest lst)))]))

(one-true trues)
(one-true mt)
(one-true one)
(one-true two)
(one-true falses)
